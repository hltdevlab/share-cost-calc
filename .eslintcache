[{"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\index.js":"1","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\App.js":"2","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\reportWebVitals.js":"3","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\index.js":"4","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\App.js":"5","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\reportWebVitals.js":"6","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\AddPeople\\addPeople.js":"7","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\AddItems\\addItems.js":"8","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Combobox\\combobox.js":"9","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\CheckboxGroup\\checkboxGroup.js":"10","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhoSharing\\whoSharing.js":"11","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\utils.js":"12","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhatCost\\whatCost.js":"13","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhoPaid\\whoPaid.js":"14","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Ledger.js":"15","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\ListItems\\listItems.js":"16","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Transaction.js":"17","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\PayableTransaction.js":"18","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\calcUtils.js":"19","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\SwitchTransitionContainer\\switchTransitionContainer.js":"20","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Pagination\\pagination.js":"21","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Summary\\summary.js":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":537,"mtime":1610187716720,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":6498,"mtime":1612713540612,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":289,"mtime":1612265266504,"results":"31","hashOfConfig":"28"},{"size":2841,"mtime":1612611979152,"results":"32","hashOfConfig":"28"},{"size":1502,"mtime":1612612399609,"results":"33","hashOfConfig":"28"},{"size":2966,"mtime":1612705098128,"results":"34","hashOfConfig":"28"},{"size":1390,"mtime":1612708924666,"results":"35","hashOfConfig":"28"},{"size":1441,"mtime":1612615426649,"results":"36","hashOfConfig":"28"},{"size":2861,"mtime":1612708775127,"results":"37","hashOfConfig":"28"},{"size":1392,"mtime":1612708863962,"results":"38","hashOfConfig":"28"},{"size":3125,"mtime":1612702804775,"results":"39","hashOfConfig":"28"},{"size":1483,"mtime":1612612462303,"results":"40","hashOfConfig":"28"},{"size":762,"mtime":1612104290439,"results":"41","hashOfConfig":"28"},{"size":630,"mtime":1612098265258,"results":"42","hashOfConfig":"28"},{"size":8252,"mtime":1612702926104,"results":"43","hashOfConfig":"28"},{"size":1012,"mtime":1612633479880,"results":"44","hashOfConfig":"28"},{"size":1768,"mtime":1612629269718,"results":"45","hashOfConfig":"28"},{"size":563,"mtime":1612703094447,"results":"46","hashOfConfig":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mriwro",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1a6ukn8",{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\index.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\App.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\my-test-app\\src\\reportWebVitals.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\index.js",[],["95","96"],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\App.js",["97","98","99","100"],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\reportWebVitals.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\AddPeople\\addPeople.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\AddItems\\addItems.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Combobox\\combobox.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\CheckboxGroup\\checkboxGroup.js",["101","102"],"import { useEffect, useRef, useState } from \"react\";\r\nimport { toCssSelectorSafeString } from '../utils';\r\nimport \"./checkboxGroup.css\";\r\n\r\nfunction CheckboxGroup(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    name,\r\n    options,\r\n    value,\r\n    updateValue\r\n  } = props;\r\n\r\n  const [isSelectAllToggle, setIsSelectAllToggle] = useState(false);\r\n\r\n  const thisRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    updateValue(generateValue());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAllSelected() && !isSelectAllToggle) {\r\n      setIsSelectAllToggle(true);\r\n    }\r\n    else if (isAllDeselected() && isSelectAllToggle) {\r\n      setIsSelectAllToggle(false);\r\n    }\r\n  }, [value]);\r\n\r\n  const generateValue = () => {\r\n    const thisElem = thisRef.current;\r\n    let newValue = {};\r\n    const checkboxes = thisElem.querySelectorAll('input[type=\"checkbox\"]');\r\n    checkboxes.forEach((checkbox) => {\r\n      newValue[checkbox.value] = checkbox.checked;\r\n    });\r\n    return newValue;\r\n  };\r\n\r\n  const isAllSelected = () => {\r\n    for (const key of Object.keys(value)) {\r\n      const isSelected = value[key];\r\n      if (!isSelected) return false;\r\n    }\r\n    return true;\r\n  };\r\n  const isAllDeselected = () => {\r\n    for (const key of Object.keys(value)) {\r\n      const isSelected = value[key];\r\n      if (isSelected) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      {\r\n        options.map(\r\n          (option) => {\r\n            const derivedItemId = toCssSelectorSafeString(option);\r\n            \r\n            return (\r\n              <label\r\n                key={option}\r\n                htmlFor={`${id}__${derivedItemId}`}\r\n                >\r\n                <input\r\n                  id={`${id}__${derivedItemId}`}\r\n                  className={`${className}__checkbox`}\r\n                  type=\"checkbox\"\r\n                  name={name}\r\n                  value={option}\r\n                  checked={value[option] ? true : false}\r\n                  onChange={(e) => {\r\n                    updateValue(generateValue());\r\n                  }}\r\n                />\r\n                <span>{option}</span>\r\n              </label>\r\n            );\r\n          }\r\n        )\r\n      }\r\n      <button\r\n        onClick={() => {\r\n          const thisElem = thisRef.current;\r\n          const checkboxes = thisElem.querySelectorAll('input[type=\"checkbox\"]');\r\n          checkboxes.forEach((checkbox) => {\r\n            checkbox.checked = !isSelectAllToggle;\r\n          });\r\n          setIsSelectAllToggle(!isSelectAllToggle);\r\n\r\n          updateValue(generateValue());\r\n        }}\r\n      >\r\n        {isSelectAllToggle ? 'Deselect All' : 'Select All'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCheckboxGroup.defaultProps = {\r\n  id: '',\r\n  className: 'checkbox-group',\r\n  name: '',\r\n  options: [],\r\n  value: {},\r\n  updateValue: () => {}\r\n};\r\n\r\nexport default CheckboxGroup;\r\n","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhoSharing\\whoSharing.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\utils.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhatCost\\whatCost.js",["103"],"import { useEffect, useRef, useState } from 'react';\r\nimport './whatCost.css';\r\n\r\nfunction WhatCost(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    fieldName,\r\n    value,\r\n    updateValue\r\n  } = props;\r\n  \r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n    inputRef.current.select();\r\n    updateValue(generateValue());\r\n  }, []);\r\n\r\n  // handler functions\r\n  const isValidInput = () => {\r\n    const inputElem = inputRef.current;\r\n    const floatValue = parseFloat(inputElem.value);\r\n\r\n    if (isNaN(floatValue)) {\r\n      setErrorMsg('Please input valid number.');\r\n    }\r\n    else if (inputElem.min && floatValue < inputElem.min) {\r\n      setErrorMsg(`Value must not be lesser than ${inputElem.min}.`);\r\n    }\r\n    else if (inputElem.max && floatValue > inputElem.max) {\r\n      setErrorMsg(`Value must not be more than ${inputElem.max}.`);\r\n    }\r\n    else {\r\n      setErrorMsg('');\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const generateValue = () => {\r\n    const newValue = {};\r\n    if (isValidInput()) {\r\n      const inputElem = inputRef.current;\r\n      const floatValue = parseFloat(inputElem.value);\r\n      newValue[itemName] = floatValue;\r\n      return newValue;\r\n    }\r\n    return newValue[itemName] = 0;\r\n  }\r\n\r\n  const _onChange = (e) => {\r\n    isValidInput();\r\n    const inputElem = inputRef.current;\r\n    const newValue = {};\r\n    const floatValue = parseFloat(inputElem.value);\r\n    newValue[itemName] = floatValue;\r\n    updateValue(newValue);\r\n    \r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1 className={`${className}__title`}>\r\n        {`${title} `}\r\n        <span className={`${className}__item-name`}>\r\n          {itemName}\r\n        </span>\r\n        ?\r\n      </h1>\r\n\r\n      <label\r\n        className={`${className}__lbl`}\r\n        htmlFor={`${id}__input`}\r\n      >\r\n        <span className={`${className}__lbl-span`}>\r\n          {`${fieldName}:`}\r\n        </span>\r\n        <input\r\n          id={`${id}__input`}\r\n          className={\r\n            errorMsg ? \r\n            `${className}__input-txt ${className}__input-txt--err`\r\n            : `${className}__input-txt`\r\n          }\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          ref={inputRef}\r\n          value={value}\r\n          onChange={_onChange}\r\n        />\r\n        <span className={`err-msg`}>\r\n          {errorMsg}\r\n        </span>\r\n      </label>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nWhatCost.defaultProps = {\r\n  id: 'what-cost',\r\n  className: 'what-cost',\r\n  title: 'What is the Cost of',\r\n  itemName: '',\r\n  fieldName: 'Cost ($)',\r\n  value: 0,\r\n  updateValue: () => {}\r\n};\r\n\r\nexport default WhatCost;\r\n","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\WhoPaid\\whoPaid.js",["104","105"],"import { useRef, useState } from 'react';\r\nimport Combobox from '../Combobox/combobox';\r\nimport { toCssSelectorSafeString } from '../utils';\r\nimport './whoPaid.css';\r\n\r\nfunction WhoPaid(props) {\r\n  const {\r\n    idPrefix,\r\n    className,\r\n    title,\r\n    itemName,\r\n    people,\r\n    value,\r\n    updateValue\r\n  } = props;\r\n\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={`${idPrefix}-${toCssSelectorSafeString(itemName)}`}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1 className={`${className}__title`}>\r\n        {`${title} `}\r\n        <span className={`${className}__item-name`}>\r\n          {itemName}\r\n        </span>\r\n        ?\r\n      </h1>\r\n\r\n      <Combobox\r\n        id={`${idPrefix}-${toCssSelectorSafeString(itemName)}__combobox`}\r\n        options={people}\r\n        errorMsg=\"\"\r\n        value={value[itemName]}\r\n        updateValue={(childValue) => {\r\n          if (childValue !== value) {\r\n            const newValue = {};\r\n            newValue[itemName] = childValue;\r\n            updateValue(newValue);\r\n          }\r\n        }}\r\n      />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nWhoPaid.defaultProps = {\r\n  idPrefix: 'who-paid',\r\n  className: 'who-paid',\r\n  title: 'Who Paid for',\r\n  itemName: '',\r\n  people: [],\r\n  value: {},\r\n  updateValue: () => {}\r\n};\r\n\r\nexport default WhoPaid;\r\n","C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Ledger.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\ListItems\\listItems.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Transaction.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\PayableTransaction.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\calcUtils.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\SwitchTransitionContainer\\switchTransitionContainer.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Pagination\\pagination.js",[],"C:\\Users\\hltdevlab\\Documents\\Shared\\ReactApps\\share-cost-calc\\src\\Summary\\summary.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":21,"column":9,"nodeType":"112","messageId":"113","endLine":21,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":33,"column":6,"nodeType":"116","endLine":35,"endColumn":4,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":55,"column":7,"nodeType":"116","endLine":55,"endColumn":14,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"120","line":66,"column":6,"nodeType":"116","endLine":71,"endColumn":4,"suggestions":"121"},{"ruleId":"114","severity":1,"message":"122","line":21,"column":6,"nodeType":"116","endLine":21,"endColumn":8,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"124","line":30,"column":6,"nodeType":"116","endLine":30,"endColumn":13,"suggestions":"125"},{"ruleId":"114","severity":1,"message":"126","line":24,"column":6,"nodeType":"116","endLine":24,"endColumn":8,"suggestions":"127"},{"ruleId":"110","severity":1,"message":"128","line":17,"column":10,"nodeType":"112","messageId":"113","endLine":17,"endColumn":18},{"ruleId":"110","severity":1,"message":"129","line":17,"column":20,"nodeType":"112","messageId":"113","endLine":17,"endColumn":31},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'nodeRef' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'items' and 'whoPaidJson'. Either include them or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has missing dependencies: 'whatCostJson', 'whoPaidJson', and 'whoSharingJson'. Either include them or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSummaryText' needs the current value of 'items'.",["134"],"React Hook useEffect has a missing dependency: 'updateValue'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has missing dependencies: 'isAllDeselected', 'isAllSelected', and 'isSelectAllToggle'. Either include them or remove the dependency array.",["136"],"React Hook useEffect has missing dependencies: 'generateValue' and 'updateValue'. Either include them or remove the dependency array.",["137"],"'errorMsg' is assigned a value but never used.","'setErrorMsg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [items, people, whoPaidJson]",{"range":"150","text":"151"},"Update the dependencies array to be: [items, whatCostJson, whoPaidJson, whoSharingJson]",{"range":"152","text":"153"},"Update the dependencies array to be: [people, whoSharingJson, whatCostJson, whoPaidJson, items]",{"range":"154","text":"155"},"Update the dependencies array to be: [updateValue]",{"range":"156","text":"157"},"Update the dependencies array to be: [isAllDeselected, isAllSelected, isSelectAllToggle, value]",{"range":"158","text":"159"},"Update the dependencies array to be: [generateValue, updateValue]",{"range":"160","text":"161"},[1256,1272],"[items, people, whoPaidJson]",[1837,1844],"[items, whatCostJson, whoPaidJson, whoSharingJson]",[2054,2133],"[people, whoSharingJson, whatCostJson, whoPaidJson, items]",[447,449],"[updateValue]",[672,679],"[isAllDeselected, isAllSelected, isSelectAllToggle, value]",[480,482],"[generateValue, updateValue]"]